select chief, assistant ,dept_tel 
from department 
where dept_name =
(select dept from student 
where s_no=9911001);

select chief, assistant ,dept_tel 
from department 
where dept_name ='컴퓨터공학과';

select * from department where 
dept_name in(select dept from student 
where year=3);


select dept from student 
where year=3;

select * from department where 
dept_name='정보과학과' or dept_name='전자공하과';

select * from department where
dept_name in('컴퓨터공학과', '전자공학과','정보통신과');


select * from department where 
dept_name in(select dept from student 
where year=3);

select d.* from department d, student s
 where d.dept_name=s.dept and s.year=3;


-- 점수가 85점이상인 학생들의 강좌이름과 학점을 출력하세요
select c_name, point from course 
where c_no 
in
( select c_no from enrollment 
where merits >= 85 );

-- 직급이 부교수인 교수들의 학과명과 조교 이름을 조회하세요
select dept_name, assistant from department
where dept_no in
(select dept_no from professor
where grade='부교수');

select s.s_no, e.merits 
from student s , enrollment e 
where s.s_no = e.s_no  and grade in('A+','B+');

select * from enrollment 
where s_no not in
( select s_no from student where year=2);


-- exists  
select * from department d
where exists
(select s.dept from student s 
where s.year=2 and s.dept = d.dept_name);

create table score( s_no int, merits int);

insert into score( s_no, merits )
values(231,32); -- 일반적인 데이터 삽입 쿼리문(질의문)

insert into score( s_no, merits )
select s_no, merits from enrollment 
where c_no=2;

delete from enrollment 
where merits < 70 and s_no in
(select s_no from student where year=3);

-- 강과 1 번을 수강하는 컴퓨터공학과 학생들의
-- 점수를 3점 증가 시키세요.
update enrollment set merits = merits +3
where c_no=1 and s_no in
(select s_no from student where dept='컴퓨터공학과');


-- 학생 테이블에서  학과별 학생수 조회 
select dept, count(s_no) from student group by dept;

-- 강의 시작시간이 1 인 강좌의 이름과 학점 조회
select c_name, point from course 
where c_no in( select c_no from lecture 
where start_time=1);
-- 2학년 학생들의 지도교수가 누구인지 교수 이름과 연구실 조회
select p_name, room_no from professor 
where p_no in( select advisor from student
where year=2);

-- 정보통신공학과 학생들이 수강한 강좌의 
-- 담당 교수 이름, 전화번호, 연구실 조회
select p_name, p_tel, room_no from professor
where p_no in
(select p_no from lecture 
where c_no in 
(select c_no from enrollment
where s_no in 
(select s_no from student 
where dept='정보통신공학과')));


-- 조건으로 조회 하는 방법
-- 1. where 절 뒤에 조건식을 넣기
select  * from student where year=3;
select * from student where year=3 and s_address='서울';
-- 2. 조건이 두개 이상인경우 and, or을 사용
select * from student 
where year=2 or s_address ='대전';
-- 3. 제외 조건 은 not
select * from student 
where not s_address ='서울';

-- 4.두개 이상 테이블 조건 으로 조회
select * from student ,enrollment
where student.s_no = enrollment.s_no and
(year=2 or dept='컴퓨터공학과');

select enrollment.* from student ,enrollment
where student.s_no = enrollment.s_no and
(year=2)

select * from enrollment
where s_no in(select s_no from student where year=2);

select *, 
(select s_name from student  
where s_no=9611035) as name  
from enrollment where s_no=9611035;


--  join 두개 이상의 테이블을 결합 하는 연산자
-- join 종류
--  inner , outer
-- inner join : 두테이블에서 같은 값만 조회
-- left join : 왼쪽 테이블 을 기준으로 오른쪽 테이블과 매치
--          : 왼쪽 테이블의 한개의 레코드에 여러개의 
--            오른쪽 테이블 레코드가 일치 한경우, 
--             왼쪽 레코드 여러번 출력
--  right join : 오른쪽 테이블을 기준으로 왼쪽 테이블 매칭
-- full join : 전체 테이블 조회

select * from professor p 
inner join lecture l
on p.p_no = l.p_no ;

select * from professor p 
left join student s 
on p.p_no = s.advisor 
where s.year=2;

select * from professor p 
right join student s 
on p.p_no = s.advisor 
where s.year=2;

-- 3개 테이블 을 join 한다면 ?
select s.s_name, e.merits, c.c_name 
from student s 
right join enrollment e 
on s.s_no = e.s_no 
left join course c 
on e.c_no =c.c_no 
where s.year=2 order by e.merits;


delete from lecture where c_no=2;
delete from enrollment where grade='C0';
delete from professor where p_no=9;

-- 4학년 학생들중에서 
-- 85점 이상인 학생의 이름, 강의이름,학점출력
select s.s_name , c.c_name ,c.point
from student s 
left join enrollment e 
on s.s_no =e.s_no 
left join course c 
on c.c_no = e.c_no 
where e.merits >=85 and s.year=4;

-- 4학년 학생들이 수강한 강의 담당 교수의 이름과,
-- 학생 이름, 학과명 출력

select p.p_name , s.s_name , s.dept
from professor p  
left join lecture l  
on l.p_no = p.p_no 
left join enrollment e 
on e.c_no =l.c_no 
left join student s 
on s.s_no =e.s_no 
where s.year=4;

-- 컴퓨터구조 강좌를 수강한 학생의 이름과 
-- 담당교수, 학과사무실위치를 출력
select s.s_name, p.p_name, d.location
from student s 
left join enrollment e 
on s.s_no =e.s_no 
left join course c 
on e.c_no =c.c_no 
left join professor p 
on p.p_no = s.advisor 
left join department d 
on d.dept_name = s.dept
where c.c_name='컴퓨터구조';

select enrollment.* from student ,enrollment
where student.s_no = enrollment.s_no and
(year=2)



-- limit  : 제한
select * from student limit 5 offset 3;

select * from student order by s_no limit 5, 6 ;

--  등록테이블에서 grade 높은순으로 정렬 하고 
--  레코드를 5개씩 조회 하시오

select * from enrollment order by grade, s_no limit 0,5;
select * from enrollment order by grade, s_no limit 5,5;
select * from enrollment order by grade, s_no limit 10,5;

select * from enrollment 
order by merits, c_no desc;


select * from professor 
where p_no >=4 and p_no <10;

select * from professor 
where p_no between 4 and 10;

-- 60년생부터 65년생까지 의 교수 출력
select * from professor 
where p_birth between '1960-01-01' and '1965-12-31';

select * from professor
where p_name between '김' and '이';





